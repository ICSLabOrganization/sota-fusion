# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

# TODO: use class instead function

from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Canvas, PhotoImage, Tk

from PIL import Image, ImageEnhance, ImageTk

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH.joinpath("assets").joinpath("style-transfer")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def get_moveOver_event(ID: int, event=None):
    global new_content_image, new_style_image
    if ID == 0:
        if "Enter" in event:
            canvas.itemconfig(button_canvas, image=img_btn_enabled)
        elif "Leave" in event:
            canvas.itemconfig(button_canvas, image=img_btn)
        else:
            return

    elif ID == 1:
        new_content_image = get_movingOver_image(
            image_PIL=img_content_PIL,
            text_canvasItem=text_contentImg_canvas,
            event=event,
        )
        new_content_image = ImageTk.PhotoImage(new_content_image)
        canvas.itemconfig(image_content_canvas, image=new_content_image)
        return

    elif ID == 2:
        new_style_image = get_movingOver_image(
            image_PIL=img_style_PIL,
            text_canvasItem=text_styleImg_canvas,
            event=event,
        )
        new_style_image = ImageTk.PhotoImage(new_style_image)
        canvas.itemconfig(image_style_canvas, image=new_style_image)
        return

    else:
        return


def get_movingOver_image(
    image_PIL: Image, text_canvasItem: int = None, event=None
):
    if "Enter" in event:
        enhancer = ImageEnhance.Brightness(image_PIL)
        new_image_PIL = enhancer.enhance(0.5)
        canvas.itemconfig(text_canvasItem, state="normal")

    elif "Leave" in event:
        canvas.itemconfig(text_canvasItem, state="hidden")
        new_image_PIL = image_PIL

    else:
        return

    return new_image_PIL


# the function to call when button clicked
def get_click_event(ID: int, event=None):
    print("clicked")
    return


########################static gui##############################
window = Tk()

window.geometry("862x519")
window.configure(bg="#0F1A2C")
########################static gui##############################


# image button deactive and active
img_btn = PhotoImage(file=relative_to_assets("btn.png"))
img_btn_enabled = PhotoImage(file=relative_to_assets("btn_enabled.png"))

# content, style and result image
img_content_PIL = Image.open(relative_to_assets("init_content.png"))
img_style_PIL = Image.open(relative_to_assets("init_style.png"))

img_result = PhotoImage(file=relative_to_assets("init_result.png"))

img_content = ImageTk.PhotoImage(img_content_PIL)
img_style = ImageTk.PhotoImage(img_style_PIL)

########################static gui##############################
canvas = Canvas(
    window,
    bg="#0F1A2C",
    height=519,
    width=862,
    bd=0,
    highlightthickness=0,
    relief="ridge",
)

canvas.place(x=0, y=0)

image_content_canvas = canvas.create_image(205.0, 136.0, image=img_content)

text_contentImg_canvas = canvas.create_text(
    133.0,
    129.0,
    anchor="nw",
    text="Change content image",
    fill="#FFFFFF",
    font=("RobotoRoman Regular", 13 * -1),
)

image_style_canvas = canvas.create_image(205.0, 368.0, image=img_style)

text_styleImg_canvas = canvas.create_text(
    142.0,
    361.0,
    anchor="nw",
    text="Change style image",
    fill="#FFFFFF",
    font=("RobotoRoman Regular", 13 * -1),
)

button_canvas = canvas.create_image(615.0, 442.0, image=img_btn)

image_result_canvas = canvas.create_image(618.0, 215.0, image=img_result)

# Hiddent text
canvas.itemconfig(text_contentImg_canvas, state="hidden")
canvas.itemconfig(text_styleImg_canvas, state="hidden")

########################static gui##############################
canvas.tag_bind(
    button_canvas,
    "<Button-1>",
    lambda event: get_click_event(ID=0, event=str(event)),
)
canvas.tag_bind(
    button_canvas,
    "<Enter>",
    lambda event: get_moveOver_event(ID=0, event=str(event)),
)
canvas.tag_bind(
    button_canvas,
    "<Leave>",
    lambda event: get_moveOver_event(ID=0, event=str(event)),
)

canvas.tag_bind(
    image_content_canvas,
    "<Button-1>",
    lambda event: get_click_event(ID=1, event=str(event)),
)
canvas.tag_bind(
    image_content_canvas,
    "<Enter>",
    lambda event: get_moveOver_event(ID=1, event=str(event)),
)
canvas.tag_bind(
    image_content_canvas,
    "<Leave>",
    lambda event: get_moveOver_event(ID=1, event=str(event)),
)

canvas.tag_bind(
    image_style_canvas,
    "<Button-1>",
    lambda event: get_click_event(ID=2, event=str(event)),
)
canvas.tag_bind(
    image_style_canvas,
    "<Enter>",
    lambda event: get_moveOver_event(ID=2, event=str(event)),
)
canvas.tag_bind(
    image_style_canvas,
    "<Leave>",
    lambda event: get_moveOver_event(ID=2, event=str(event)),
)

window.resizable(False, False)
window.mainloop()
