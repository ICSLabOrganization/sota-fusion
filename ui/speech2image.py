
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, PhotoImage


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH.joinpath("assets").joinpath("speech2image")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def get_moveOver_event(ID: int, event=None):
    if ID == 0:
        if "Enter" in event:
            canvas.itemconfig(button_generate_canvas, 
                              image=img_btn_generate_enabled)

        elif "Leave" in event:
            canvas.itemconfig(button_generate_canvas, 
                              image=img_btn_generate)

        else:
            return

    elif ID == 1:
        if "Enter" in event:
            canvas.itemconfig(btn_delete_canvas, 
                              image=img_btn_delete_enabled)

        elif "Leave" in event:
            canvas.itemconfig(btn_delete_canvas, 
                              image=img_btn_delete)

        else:
            return
        
    else:
        return


# the function to call when button clicked
def get_click_event(ID:int, event=None):
    print('clicked')
    return

########################static gui##############################
window = Tk()

window.geometry("862x519")
window.configure(bg = "#0F1A2C")
########################static gui##############################

#image button deactive and active
img_btn_generate = PhotoImage(file=relative_to_assets("btn_generate.png"))
img_result = PhotoImage(file=relative_to_assets("init_result.png"))
img_btn_record = PhotoImage(file=relative_to_assets("btn_record.png"))
img_btn_delete = PhotoImage(file=relative_to_assets("btn_delete.png"))

img_btn_generate_enabled = PhotoImage(file=relative_to_assets("btn_generate_enabled.png"))
img_btn_delete_enabled = PhotoImage(file=relative_to_assets("btn_delete_enabled.png"))

########################static gui##############################
canvas = Canvas(
    window,
    bg = "#0F1A2C",
    height = 519,
    width = 862,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)

button_generate_canvas = canvas.create_image(
    615.0,
    442.0,
    image=img_btn_generate
)

image_result_canvas = canvas.create_image(
    618.0,
    215.0,
    image=img_result
)

btn_record_canvas = canvas.create_image(
    208.0,
    102.0,
    image=img_btn_record
)

btn_delete_canvas = canvas.create_image(
    332.0,
    215.0,
    image=img_btn_delete
)
########################static gui##############################
canvas.tag_bind(button_generate_canvas, '<Button-1>', lambda event: get_click_event(ID=0, event=str(event)))
canvas.tag_bind(button_generate_canvas, '<Enter>',    lambda event: get_moveOver_event(ID=0, event=str(event)))
canvas.tag_bind(button_generate_canvas, '<Leave>',    lambda event: get_moveOver_event(ID=0, event=str(event)))

canvas.tag_bind(btn_delete_canvas, '<Button-1>', lambda event: get_click_event(ID=1, event=str(event)))
canvas.tag_bind(btn_delete_canvas, '<Enter>',    lambda event: get_moveOver_event(ID=1, event=str(event)))
canvas.tag_bind(btn_delete_canvas, '<Leave>',    lambda event: get_moveOver_event(ID=1, event=str(event)))

window.resizable(False, False)
window.mainloop()
